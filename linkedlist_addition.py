# -*- coding: utf-8 -*-
"""LinkedList_Addition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16CwN0e54BQr6WmDWVb_uQdmCEAs-p7K6
"""

class Node:
  def __init__(self, value):
    self.value = value
    self.next = None

  def getValue(self):
    return self.value
  
  def getNext(self):
    return self.next

  
def traverse(head):
  current = head
  while not current is None:
    print(current.getValue())
    current = current.getNext()

#Now, what happens if we have to add two numbers that have to be represented in a linkedList

#First step: Write a function that transforms a number into a linked list

def transform(number):
  container = str(number)
  other = list(container)
  node_bucket = []
  for number in other:
    converter = int(number)
    node_bucket.append(Node(converter))

  for i in range(len(node_bucket)-1):
    node_bucket[i].next = node_bucket[i+1]
  
  return node_bucket[0]


one = transform(10)
two = transform(92)

traverse(one)
traverse(two)

#Second Step: Proceed to write a function that reverses the linkedlist because you have to add from right to left

def reverseLinkedList(header):
  stack = []
  current = header
  while not current is None:
    stack.append(current)
    current = current.next
  
  updated_stack = stack[::-1]
  for i in range(len(updated_stack)-1):
    updated_stack[i].next = updated_stack[i+1]
  
  updated_stack[-1].next = None
  return updated_stack[0]

traverse(two)
new_head_two = reverseLinkedList(two)
traverse(new_head_two)

#Third Step: Iterate through the linked lists and add the numbers: Be wary of the carry ons
'''
Game plan: 
 -Traverse the linked lists (both of them simultaneously) and add the numbers of the node you are currently looking at
 -Have a stack for carry ons 
 -Calculate the carry ons by getting mod 10 (you are dealing with bases of 10)'

 Update: 
 The code below works for linked lists that are of the same length.
 Now, the next challenge is to account for linked lists that are of the same length
'''

def add_linked_lists(l1, l2):
    current_one = reverseLinkedList(l1)
    current_two = reverseLinkedList(l2)
    value_one = 0
    value_one = 0
    passer = 0
    carry_stack = []
    answer_stack = []
    while True:
      while not current_one is None and passer == 0:
        value_one = current_one.getValue()
        print(current_one.getValue())
        current_one = current_one.next;
        passer = 1

      print("Going to other")
      while not current_two is None and passer == 1:
        value_two = current_two.getValue()
        print(value_two)
        current_two = current_two.next
        passer = 0
      print("Summing")
      summation = value_one + value_two
      if len(carry_stack) > 0:
        print("Going to carry")
        number = carry_stack.pop()
        summation += number
      
      print(summation)
      if summation > 10:
        carry_on = summation % 10
        carry_stack.append(carry_on)
        print("Here is carry_on: {}".format(carry_on))
      else:
        answer_stack.append(str(summation))

      print("Sum Calculated {}".format(summation))
      if current_one is None or current_two is None:
        break

    answer = ''.join(answer_stack[::-1])
    answer = int(answer)
    answer = transform(answer)
    return answer
    

      

sum_answer = add_linked_lists(one, two)
traverse(sum_answer)

